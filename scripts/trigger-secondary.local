#!/bin/bash
# vim:set et ts=4 sw=4 ft=bash ai:

# WARNING: This script works only for main (no contrib)

ARCHIVE='local'
SUITES="jessie"
ARCHES="amd64"

REPOSITORY='/srv/wanna-build/tmp/bxbos'
MAIN_MIRROR_SOURCE="http://10.0.2.129/bxbos"
OVERLAY_MIRROR_SOURCE="http://10.0.2.114/bxbos"
cd /srv/wanna-build/triggers
. common

# Redirect the output to a log file
#exec >> /org/wanna-build/db/merge.$ARCHIVE.log 2>&1

if [ ! -d $REPOSITORY ]
then
	echo "Could not find repository $REPOSITORY, create it"
    mkdir -p $REPOSITORY
#	exit 1
fi

if [ -f /org/wanna-build/NO-TRIGGERS ]
then
	echo Trigger for $ARCHIVE skipped due to NO-TRIGGERS, aborting. >&2
	exit 0
fi

echo "`date`: Running trigger for $ARCHIVE ..."

fetch() {
	src="$1"
	dest="$2"

	if [ -f "$src" ]
	then
		mkdir -p "$dest"
		cp "$src" "$dest"
	fi
}

filter_out_nonfree() {
    local INPUT="$1"
    local OUTPUT="$2"

    gunzip -c "$INPUT" | grep-dctrl -v -r -F Section 'non-free/.*' | gzip -c > "$OUTPUT"
}

main() {
	set -eE
    # When no action specified in trap
    # Default activity is to exit shell
    # here specify cleanup, defined in common
	trap cleanup ERR TERM HUP INT QUIT

	ensure_lock
	ensure_workdir

	for suite in $SUITES
	do
        wget -P /srv/buildd.debian.org/web/quinn-diff/${suite}/ https://buildd.debian.org/quinn-diff/${suite}/Packages-arch-specific
    done

	# Fetch the most recent Packages and Sources files.
	for suite in $SUITES
	do
        # assume jpu on 10.0.2.129 is jessie
        # jpu on 10.0.2.114 is jpu
        # use overlay and watch what happened
        test -f $ARCHIVE_BASE/archive/$suite/main/source/Sources.gz && rm  $ARCHIVE_BASE/archive/$suite/main/source/Sources.gz
        wget -P $ARCHIVE_BASE/archive/$suite/main/source/  $MAIN_MIRROR_SOURCE/dists/${suite}-proposed-updates/main/source/Sources.gz   

       test -f $ARCHIVE_BASE/archive/${suite}-proposed-updates/main/source/Sources.gz && rm $ARCHIVE_BASE/archive/${suite}-proposed-updates/main/source/Sources.gz
        wget -P $ARCHIVE_BASE/archive/${suite}-proposed-updates/main/source/  $OVERLAY_MIRROR_SOURCE/dists/${suite}-proposed-updates/main/source/Sources.gz   

		for arch in $ARCHES
		do
			test -f $ARCHIVE_BASE/archive/$suite/main/binary-$arch/Packages.gz && rm $ARCHIVE_BASE/archive/$suite/main/binary-$arch/Packages.gz
            wget -P $ARCHIVE_BASE/archive/$suite/main/binary-$arch/  $MAIN_MIRROR_SOURCE/dists/${suite}-proposed-updates/main/binary-$arch/Packages.gz

			test -f $ARCHIVE_BASE/archive/${suite}-proposed-updates/main/binary-$arch/Packages.gz && rm $ARCHIVE_BASE/archive/${suite}-proposed-updates/main/binary-$arch/Packages.gz
            wget -P $ARCHIVE_BASE/archive/${suite}-proposed-updates/main/binary-$arch/  $OVERLAY_MIRROR_SOURCE/dists/${suite}-proposed-updates/main/binary-$arch/Packages.gz
		done
	done

	for suite in $SUITES
	do
        SOURCES="$ARCHIVE_BASE/archive/${suite}-proposed-updates/main/source/Sources.gz"
		PACKAGES="$ARCHIVE_BASE/archive/${suite}-proposed-updates/main/binary-%ARCH%/Packages.gz"

        SOURCES_BASE="$ARCHIVE_BASE/archive/$suite/main/source/Sources.gz"
        PACKAGES_BASE="$ARCHIVE_BASE/archive/$suite/main/binary-%ARCH%/Packages.gz"
		trigger_wb_update_with_secondary "${suite}-proposed-updates" "$ARCHES" "$PACKAGES_BASE" "$SOURCES" "$PACKAGES" "${suite}-proposed-updates"
	done

	cleanup
}

main
exit 0

